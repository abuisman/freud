{"version":3,"sources":["freud.js"],"names":["default_options","behaviourKey","normalize_behaviours","behaviours","JSON","parse","e","getBehaviours","element","options","dataset","concat","getTargets","selector_or_dom","target_attr","targets","document","querySelectorAll","HTMLElement","Freud","forEach","target","el_behaviours","target_options","behaviour_name","behaviour_or_name","behaviour","name","fn","readyState","addEventListener"],"mappings":"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","file":"freud.js","sourceRoot":"../src","sourcesContent":["const default_options = {\n  behaviourKey: 'behaviours',\n};\n\nvar normalize_behaviours = (behaviours) => {\n  if(!behaviours) {\n    return [];\n  }\n\n  try {\n    behaviours = JSON.parse(behaviours)\n  } catch(e) {\n    behaviours = behaviours\n\n    if(typeof behaviours != 'object') {\n      behaviours = [behaviours]\n    }\n  }\n  return behaviours;\n};\n\nfunction getBehaviours(element, options) {\n  var behaviours = normalize_behaviours(element.dataset[options['behaviourKey']]);\n\n  if(options['behaviours']) {\n    behaviours = (behaviours||[]).concat(options['behaviours']);\n  }\n\n  return behaviours;\n}\n\nfunction getTargets(selector_or_dom, options) {\n  var targets;\n\n  if(selector_or_dom == null) {\n    var target_attr = `data-${options['behaviourKey']}`;\n    targets = document.querySelectorAll(`[${target_attr}]`);\n  } else if(selector_or_dom instanceof HTMLElement) {\n    targets = [selector_or_dom];\n  }\n  else if(typeof selector_or_dom == 'string') {\n    var targets = document.querySelectorAll(selector_or_dom);\n  }\n  else {\n    throw 'No compatible selector or DOM node given to Freud.init';\n  }\n\n  return targets;\n}\n\nclass Freud {\n  constructor() {\n    this.behaviours = {}\n  }\n\n  init(selector_or_dom = null, options = {}) {\n    options = { ...default_options, ...options };\n    var targets = getTargets(selector_or_dom, options) || [];\n\n    targets.forEach((target) => {\n      var el_behaviours = getBehaviours(target, options);\n      var target_options = {...options, ...target.dataset};\n\n      el_behaviours.forEach((behaviour_name) => {\n        if(this.behaviours[behaviour_name]) {\n          if(!target.dataset[`loaded_behaviour_${behaviour_name}`]) {\n            target.dataset[`loaded_behaviour_${behaviour_name}`] = true;\n            new this.behaviours[behaviour_name](target, target_options);\n          }\n        }\n      });\n    })\n\n    return targets;\n  }\n\n  register(behaviour_or_name, behaviour = null) {\n    if(!behaviour_or_name) {\n      throw(\"Freud.register called without a behaviour or name\");\n    }\n\n    if (typeof behaviour_or_name == 'function') {\n      var name = behaviour_or_name.name;\n      behaviour = behaviour_or_name;\n    } else {\n      if(!behaviour || (typeof behaviour != 'function') ) {\n        throw(\"Freud.register called without a behaviour or behaviour type is invalid\");\n      }\n      var name = behaviour_or_name;\n      behaviour = behaviour;\n    }\n\n    this.behaviours[name] = behaviour;\n  }\n\n  ready(fn) {\n    if (document.readyState != 'loading'){\n      fn();\n    } else {\n      document.addEventListener('DOMContentLoaded', fn);\n    }\n  }\n}\n\nexport default new Freud;\n"]}